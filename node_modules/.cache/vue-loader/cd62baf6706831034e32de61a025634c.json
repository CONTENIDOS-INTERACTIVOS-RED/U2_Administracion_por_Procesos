{"remainingRequest":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/src/views/curso/Tema1.vue?vue&type=template&id=71855076&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/src/views/curso/Tema1.vue","mtime":1745463791496},{"path":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Administracion_por_Procesos/U2_Administracion_por_Procesos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}